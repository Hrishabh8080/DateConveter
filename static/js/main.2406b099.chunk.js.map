{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","getData","e","setState","input","target","value","updateDate","diff","Date","state","updatedDate","alert","Math","floor","console","log","item","date","days","items","concat","current","toUTCString","currentdate","toLocaleDateString","className","this","onChange","type","required","onClick","length","map","i","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAgEeA,E,kDA7Db,aAAe,IAAD,8BACZ,gBAUFC,QAAU,SAAAC,GACR,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SAZpB,EAcdC,WAAY,WACX,IAAIC,EAAO,IAAIC,KAAS,IAAIA,KAAK,EAAKC,MAAMN,OAC3C,GAA+B,OAA3B,EAAKM,MAAMC,aAA2C,KAApB,EAAKD,MAAMN,MAE/CQ,MAAM,wBAEH,CACH,EAAKT,SAAS,CAAEQ,YAAcE,KAAKC,MAAMN,EAAI,OAA4B,UAEzEO,QAAQC,IAAI,EAAKN,MAAMC,aACvBI,QAAQC,IAAKH,KAAKC,MAAMN,EAAI,OAA4B,SAExD,IAAMS,EAAO,CAAEC,KAAM,EAAKR,MAAMN,MAAOe,KAAM,EAAKT,MAAMC,aACxD,EAAKR,SAAS,CAAEiB,MAAO,EAAKV,MAAMU,MAAMC,OAAOJ,KAC/CF,QAAQC,IAAI,EAAKN,MAAMU,SA1BzB,EAAKV,MAAQ,CACXU,MAAO,GACPhB,MAAO,GACPkB,SAAS,IAAIb,MAAOc,cACpBC,aAAa,IAAIf,MAAOgB,qBACxBd,YAAa,SAPH,E,0CAiCd,WACE,OACE,8BACE,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BC,KAAKjB,MAAMY,UAC1C,oBAAII,UAAU,gBAAd,SAA+BC,KAAKjB,MAAMC,cAE1C,mCAAOL,MAAOqB,KAAKjB,MAAMN,MAAOwB,SAAUD,KAAK1B,QAASyB,UAAU,cAAcG,KAAK,OAAOC,UAAQ,GAApG,YAA+G,gBAAgB,uBAC/H,wBAAQC,QAASJ,KAAKpB,WAAYmB,UAAU,YAA5C,oBACA,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,mBAAd,qBAEEC,KAAKjB,MAAMU,MAAMY,OAAS,EACxBL,KAAKjB,MAAMU,MAAMa,KAAI,SAAChB,EAAMiB,GAC1B,OACE,sBAAKR,UAAU,gBAAf,UAAuC,mBAAGA,UAAU,QAAb,SAAsBT,EAAKC,OAAS,mBAAGQ,UAAU,MAAb,SAAoBT,EAAKE,SAAhEe,MAEnC,oC,GApDLC,aCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2406b099.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      input: '',  \n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    }\n  }\n\n  getData = e => {\n    this.setState({ input: e.target.value })\n  }\n  updateDate =() => {\n   let diff = new Date() - new Date(this.state.input);\n    if (this.state.updatedDate === null ||this.state.input=== '') {\n    //  this.setState({ updatedDate: '0 day' })\n      alert(\"enter valid date\")\n    }\n    else {\n      this.setState({ updatedDate: (Math.floor(diff / (1000 * 60 * 60 * 24)) + \" days\") })\n      \n      console.log(this.state.updatedDate);\n      console.log((Math.floor(diff / (1000 * 60 * 60 * 24)) + \" days\"));\n      \n      const item = { date: this.state.input, days: this.state.updatedDate };\n      this.setState({ items: this.state.items.concat(item) });\n      console.log(this.state.items)\n  //    console.log(this.state.updatedDate);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"card__layout\">\n            <h2 className=\"card__heading\">{this.state.current}</h2>\n            <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n            <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n            <button onClick={this.updateDate} className='card__btn'>Submit</button>\n            <div className=\"history__container\">\n              <h3 className=\"history__heading\">History</h3>\n              {\n                this.state.items.length > 0 ?\n                  this.state.items.map((item, i) => {\n                    return (\n                      <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n                    )\n                  }) : <p></p>}\n            </div>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}