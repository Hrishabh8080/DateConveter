{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","getData","e","setState","input","target","value","updateDate","state","updatedDate","alert","x","setInterval","diff","Date","days","Math","floor","hours","minutes","seconds","clearInterval","item","date","items","concat","console","log","current","toUTCString","currentdate","toLocaleDateString","className","this","onChange","type","required","onClick","length","map","i","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PA2EeA,E,kDAxEb,aAAe,IAAD,8BACZ,gBAUFC,QAAU,SAAAC,GACR,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SAZpB,EAcdC,WAAa,WACX,GAA+B,OAA3B,EAAKC,MAAMC,aAA6C,KAArB,EAAKD,MAAMJ,MAEhDM,MAAM,wBAEH,CAGH,IAAIC,EAAIC,aAAY,WAElB,IAAIC,EAAO,IAAIC,KAAK,EAAKN,MAAMJ,OAAS,IAAIU,KACxCC,EAAOC,KAAKC,MAAMJ,EAAI,OACtBK,EAAQF,KAAKC,MAAOJ,EAAI,MAAL,MACnBM,EAAUH,KAAKC,MAAOJ,EAAI,KAAL,KACrBO,EAAUJ,KAAKC,MAAOJ,EAAI,IAAkB,KAEhD,EAAKV,SAAS,CAAEM,YAAY,GAAD,OAAKM,EAAL,gBAAiBG,EAAjB,eAA6BC,EAA7B,gBAA4CC,EAA5C,QACvBP,EAAO,IACTQ,cAAcV,GACd,EAAKR,SAAS,CAAEM,YAAa,6BAG9B,KACGa,EAAO,CAAEC,KAAM,EAAKf,MAAMJ,MAAOW,KAAM,EAAKP,MAAMC,aACxD,EAAKN,SAAS,CAAEqB,MAAO,EAAKhB,MAAMgB,MAAMC,OAAOH,KAC/CI,QAAQC,IAAI,EAAKnB,MAAMgB,SArCzB,EAAKhB,MAAQ,CACXgB,MAAO,GACPpB,MAAO,GACPwB,SAAS,IAAId,MAAOe,cACpBC,aAAa,IAAIhB,MAAOiB,qBACxBtB,YAAa,SAPH,E,0CA4Cd,WACE,OACE,8BACE,qBAAKuB,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BC,KAAKzB,MAAMoB,UAC1C,oBAAII,UAAU,gBAAd,SAA+BC,KAAKzB,MAAMC,cAE1C,mCAAOH,MAAO2B,KAAKzB,MAAMJ,MAAO8B,SAAUD,KAAKhC,QAAS+B,UAAU,cAAcG,KAAK,OAAOC,UAAQ,GAApG,YAA+G,gBAAgB,uBAC/H,wBAAQC,QAASJ,KAAK1B,WAAYyB,UAAU,YAA5C,oBACA,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,mBAAd,qBAEEC,KAAKzB,MAAMgB,MAAMc,OAAS,EACxBL,KAAKzB,MAAMgB,MAAMe,KAAI,SAACjB,EAAMkB,GAC1B,OACE,sBAAKR,UAAU,gBAAf,UAAuC,mBAAGA,UAAU,QAAb,SAAsBV,EAAKC,OAAS,mBAAGS,UAAU,MAAb,SAAoBV,EAAKP,SAAhEyB,MAEnC,oC,GA/DLC,aCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57bcc7b3.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      input: '',\n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    }\n  }\n\n  getData = e => {\n    this.setState({ input: e.target.value })\n  }\n  updateDate = () => {\n    if (this.state.updatedDate === null || this.state.input === '') {\n      //  this.setState({ updatedDate: '0 day' })\n      alert(\"enter valid date\")\n    }\n    else {\n      \n      \n      let x = setInterval(() => {\n        \n        let diff = new Date(this.state.input) - new Date();\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        \n        this.setState({ updatedDate: `${days} d : ${hours} h :${minutes} m : ${seconds} s` });\n        if (diff < 0) {\n          clearInterval(x);\n          this.setState({ updatedDate: \"Expire Date/CountDown\" })\n        }\n        \n      }, 1000);\n      const item = { date: this.state.input, days: this.state.updatedDate };\n      this.setState({ items: this.state.items.concat(item) });\n      console.log(this.state.items)\n      //    console.log(this.state.updatedDate);\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"card__layout\">\n            <h2 className=\"card__heading\">{this.state.current}</h2>\n            <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n            <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n            <button onClick={this.updateDate} className='card__btn'>Submit</button>\n            <div className=\"history__container\">\n              <h3 className=\"history__heading\">History</h3>\n              {\n                this.state.items.length > 0 ?\n                  this.state.items.map((item, i) => {\n                    return (\n                      <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n                    )\n                  }) : <p></p>}\n            </div>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}